require('dotenv').config();
const { getSheetData } = require('./googleSheets');
const { sendPhoto, deleteMessage } = require('./telegram');
const fs = require('fs');

const MESSAGE_HISTORY_FILE = 'messages.json';

async function main() {
  const data = await getSheetData('bot');
  console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:', data);

  if (!data || data.length < 2) {
    console.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
    return;
  }

  const headers = data[0];
  const rows = data.slice(1);

  const barcodeIndex = headers.indexOf('–ë–∞—Ä–∫–æ–¥');
  const articleIndex = headers.indexOf('–ê—Ä—Ç–∏–∫—É–ª');
  const photoIndex = headers.indexOf('–§–æ—Ç–æ');
  const stockIndex = headers.indexOf('–û—Å—Ç–∞—Ç–æ–∫ WB');
  const ffStockIndex = headers.indexOf('–û—Å—Ç–∞—Ç–æ–∫ –§–§');
  const sizeIndex = headers.indexOf('–†–∞–∑–º–µ—Ä');
  const avgSalesIndex = headers.indexOf('–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏');
  const fTextIndex = 5;
  const gTextIndex = 6;
  const managerIndex = headers.indexOf('–º–µ–Ω–µ–¥–∂–µ—Ä—ã');

  console.log('–ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫:', {
    barcodeIndex, articleIndex, photoIndex, stockIndex,
    ffStockIndex, sizeIndex, avgSalesIndex, fTextIndex, gTextIndex, managerIndex
  });

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const oldMessages = loadMessages();
  console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${oldMessages.length} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);

  // –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —É–¥–∞–ª—è–µ–º –∏—Ö
  if (oldMessages.length > 0) {
    for (const id of oldMessages) {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID: ${id}`);
      try {
        const success = await deleteMessage(id);
        if (success) {
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${id} —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
        } else {
          console.warn(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–µ–Ω–æ`);
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', e.message);
      }
    }
  } else {
    console.log('–ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
  }

  saveMessages([]); // –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

  const newMessageIds = [];
  const groupedByArticle = {};

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
  for (const row of rows) {
    const article = row[articleIndex];
    if (!article) continue;

    if (!groupedByArticle[article]) groupedByArticle[article] = [];

    groupedByArticle[article].push({
      barcode: row[barcodeIndex],
      photo: row[photoIndex],
      stock: row[stockIndex],
      ffStock: row[ffStockIndex],
      size: row[sizeIndex],
      avgSales: row[avgSalesIndex],
      fText: row[fTextIndex],
      gText: row[gTextIndex],
      manager: row[managerIndex]
    });
  }

  const allArticles = Object.keys(groupedByArticle).sort();

  // === F ===
  for (const article of allArticles) {
    const fItems = groupedByArticle[article].filter(i => i.fText && i.fText.trim() !== '');
    if (fItems.length === 0) continue;

    let caption = `–í –ê—Ä—Ç–∏–∫—É–ª ${article}\n\n`;

    for (const item of fItems) {
      const hasSize = item.size && item.size !== '0' && item.size !== '' && item.size !== '#N/A';
      const label = hasSize ? `–ù–∞ —Ä–∞–∑–º–µ—Ä–µ ${item.size}` : `–ù–∞ –±–∞—Ä–∫–æ–¥–µ ${item.barcode}`;

      const rawAvg = item.avgSales?.toString().replace(',', '.');
      const avg = !isNaN(parseFloat(rawAvg)) ? `—Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å ${rawAvg}—à—Ç.` : '';

      caption += `${label}, ${avg}\n`;
      caption += `${item.manager ? item.manager + ', ' : ''}${item.fText.trim()}\n`;
      caption += `–û—Å—Ç–∞—Ç–æ–∫ WB: ${item.stock}, –û—Å—Ç–∞—Ç–æ–∫ –§–§: ${item.ffStock}\n\n`;
    }

    const photoUrl = fItems.find(item => item.photo)?.photo;
    if (photoUrl) {
      console.log('üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ F-—Å–æ–æ–±—â–µ–Ω–∏—è:', { photoUrl, caption: caption.trim() });
      try {
        const messageId = await sendPhoto(photoUrl, caption.trim());
        newMessageIds.push(messageId);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ F-—Å–æ–æ–±—â–µ–Ω–∏—è:', err.message);
      }
    }
  }

  // === G ===
  for (const article of allArticles) {
    const gItems = groupedByArticle[article].filter(i => i.gText && i.gText.trim() !== '');
    if (gItems.length === 0) continue;

    let caption = `–í –ê—Ä—Ç–∏–∫—É–ª ${article}\n\n`;

    for (const item of gItems) {
      const hasSize = item.size && item.size !== '0' && item.size !== '' && item.size !== '#N/A';
      const label = hasSize ? `–ù–∞ —Ä–∞–∑–º–µ—Ä–µ ${item.size}` : `–ù–∞ –±–∞—Ä–∫–æ–¥–µ ${item.barcode}`;

      const rawAvg = item.avgSales?.toString().replace(',', '.');
      const avg = !isNaN(parseFloat(rawAvg)) ? `—Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å ${rawAvg}—à—Ç.` : '';

      caption += `${label}, ${avg}\n`;
      caption += `${item.gText.trim()}\n`;
      caption += `–û—Å—Ç–∞—Ç–æ–∫ WB: ${item.stock}, –û—Å—Ç–∞—Ç–æ–∫ –§–§: ${item.ffStock}\n\n`;
    }

    const photoUrl = gItems.find(item => item.photo)?.photo;
    if (photoUrl) {
      console.log('üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ G-—Å–æ–æ–±—â–µ–Ω–∏—è:', { photoUrl, caption: caption.trim() });
      try {
        const messageId = await sendPhoto(photoUrl, caption.trim());
        newMessageIds.push(messageId);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ G-—Å–æ–æ–±—â–µ–Ω–∏—è:', err.message);
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
  saveMessages(newMessageIds);
}

function loadMessages() {
  if (!fs.existsSync(MESSAGE_HISTORY_FILE)) {
    console.log('–§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π');
    return [];
  }
  const data = JSON.parse(fs.readFileSync(MESSAGE_HISTORY_FILE));
  console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞`);
  return data;
}

function saveMessages(ids) {
  console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', ids);
  fs.writeFileSync(MESSAGE_HISTORY_FILE, JSON.stringify(ids));
}

main().catch((error) => {
  console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è main:', error.message);
});
