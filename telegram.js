const fetch = require('node-fetch');

async function sendPhoto(photoUrl, caption) {
  const url = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendPhoto`;
  const payload = {
    chat_id: process.env.TELEGRAM_CHAT_ID,
    photo: photoUrl,
    caption: caption
  };

  let attempts = 0;

  while (attempts < 5) {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    const data = await response.json();

    if (data.ok) {
      console.log('‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data.result.message_id);
      return data.result.message_id;
    }

    if (data.error_code === 429 && data.parameters?.retry_after) {
      const wait = data.parameters.retry_after;
      console.warn(`‚è≥ Rate limit. –ñ–¥—ë–º ${wait} —Å–µ–∫...`);
      await new Promise(resolve => setTimeout(resolve, wait * 1000));
    } else if (data.error_code === 400 || data.error_code === 404) {
      console.warn(`‚ö†Ô∏è sendPhoto –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (code ${data.error_code}). –ò—Å–ø–æ–ª—å–∑—É–µ–º sendMessage`);
      return await sendMessageWithFallback(photoUrl, caption);
    } else {
      throw new Error(data.description);
    }

    attempts++;
  }

  throw new Error('sendPhoto: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫');
}

async function sendMessageWithFallback(photoUrl, caption) {
  const url = `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`;
  const payload = {
    chat_id: process.env.TELEGRAM_CHAT_ID,
    text: `${caption}\n\n–§–æ—Ç–æ: ${photoUrl}`
  };

  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  });

  const data = await response.json();

  if (data.ok) {
    console.log('‚úÖ Fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data.result.message_id);
    return data.result.message_id;
  }

  throw new Error(`sendMessage fallback: ${data.description}`);
}

async function deleteMessage(messageId) {
  const url = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/deleteMessage`;
  const payload = {
    chat_id: process.env.TELEGRAM_CHAT_ID,
    message_id: messageId,
  };

  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  });

  const data = await response.json();

  if (!data.ok) {
    if (data.error_code === 429 && data.parameters?.retry_after) {
      const wait = data.parameters.retry_after;
      console.warn(`‚è≥ Rate limit —É–¥–∞–ª–µ–Ω–∏—è. –ñ–¥—ë–º ${wait} —Å–µ–∫...`);
      await new Promise(resolve => setTimeout(resolve, wait * 1000));
      return deleteMessage(messageId);
    }

    if (data.error_code === 400) {
      console.warn(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return false;
    }

    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${data.description}`);
    return false;
  }

  console.log(`üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageId}`);
  return true;
}

module.exports = { sendPhoto, deleteMessage };
